Part 5
====

Iteration statement is implemented with the following EBNF rule:

	for ::= '{' assignment expr assignment block '}'

This entails an update to the statement rule given in the specification to be the following:

	statement  ::=  assigment | print | if | do | for

The semantics of the for construct (iteration statement) is as follows. Its design was selected so as to align its internal syntax closely with the for statements of other languages, such as C.

	The first assignment in the construct is used as an initialization statement, mimicking C's `for` statement, whose first element within the parenthetical is the initialization statement.

	E.g. i = 10

	The expr in the construct is used to terminate the iteration. This is intended to mimic the second element in the parenthetical of C's `for` statement. If the the expr evaluates to a truthy value, the block will be run. If it evaluates to a falsey value, the block is skipped. Here, truthy and falsey coincide with the true and false evaluation of expressions given in the specification for guarded statements in E. This expr is evaluted prior to running the block.

	E.g. i

	The second assignment in the construct is used to update the state of the loop. We expect the typical use of this statement to be either incrementing or decrementing the principal (or sole) variable which is evaluated in the expr described in the preceding paragraph. This is intended to mimic the third element of the parenthetical of C's `for` statement. This 

	E.g. i = i + 1

	The block is executed after evaluating the expr iff the expr evaluted to a truthy value. Upon completion of the block, execution is returned to the expr in order to loop into the block again (if the expr evalutes to true again).

	E.g. { !i !i !i }

A malformed iteration statement (e.g. the first element is a declaration instead of a statement) results in a fatal error; compilation ceases.